# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RemoteSensingARDTimeSeriesDownloader
                                 A QGIS plugin
 Remote sensing ARD time series downloader using OPENEO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-01
        git sha              : $Format:%H$
        copyright            : (C) 2025 by David Hernández López
        email                : david.hernandez@uclm.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QFileInfo, QDir, QObject, QFile
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsApplication, QgsDataSourceUri
from qgis.utils import plugins
# Initialize Qt resources from file resources.py
from .resources import *
from platform import python_version

# Import the code for the DockWidget
from .rs_ard_time_series_downloader_dockwidget import RemoteSensingARDTimeSeriesDownloaderDockWidget
import os.path

import sys
# sys.path.append("C:\Program Files\JetBrains\PyCharm 2018.3.3\debug-eggs\pycharm-debug.egg") # dhl
# sys.path.append("C:\Program Files\JetBrains\PyCharm 2020.3\debug-eggs\pydevd-pycharm.egg") # dhl
sys.path.append("C:\Program Files\JetBrains\PyCharm 2022.2.3\debug-eggs\pydevd-pycharm.egg") # dhl
import pydevd

pluginsPath = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path()
pluginPath = os.path.dirname(os.path.realpath(__file__))
pluginPath = os.path.join(pluginsPath, pluginPath)
sys.path.append(pluginPath)

from . import definitions

class RemoteSensingARDTimeSeriesDownloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        pydevd.settrace('localhost',port=55100,stdoutToServer=True,stderrToServer=True)

        self.path_plugin = pluginPath
        self.current_plugin_name = definitions.CONST_SETTINGS_PLUGIN_NAME

        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RemoteSensingARDTimeSeriesDownloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Remote Sensing ARD Time Series Downloader')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'RemoteSensingARDTimeSeriesDownloader')
        self.toolbar.setObjectName(u'RemoteSensingARDTimeSeriesDownloader')

        #print "** INITIALIZING RemoteSensingARDTimeSeriesDownloader"

        self.pluginIsActive = False
        self.dockwidget = None
        self.user_roaming_path = None
        self.openeo_auth_file_path = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RemoteSensingARDTimeSeriesDownloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/rs_ard_time_series_downloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Remote Sensing ARD Time Series Downloader'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING ForestFireSeverityEstimation"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD ForestFireSeverityEstimation"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Remote Sensing ARD Time Series Downloader'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        if not self.pluginIsActive:
            user_roaming_path = os.environ['APPDATA']
            user_python_path = os.path.join(user_roaming_path, "python")
            if not os.path.exists(user_python_path):
                str_error = self.tr(u'Not exists user python path:\n{}'.format(user_python_path))
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Information)
                title = definitions.CONST_PROGRAM_TITLE
                msgBox.setWindowTitle(title)
                # msgBox.setTextFormat(Qt.RichText)
                msgBox.setText(str_error)
                msgBox.exec_()
                return
            python_version_str = python_version()
            python_version_str = python_version_str.replace('.', '')
            python_version_str = 'Python' + python_version_str
            user_python_subfolders = [f.path for f in os.scandir(user_python_path) if f.is_dir()]
            user_python_folder = ''
            for user_python_subfolder in user_python_subfolders:
                user_python_version = os.path.basename(os.path.normpath(user_python_subfolder))
                if user_python_version in python_version_str:
                    user_python_folder = user_python_subfolder
                    break
            if not user_python_folder:
                str_error = self.tr(
                    u'Not exists python version folrder in user python path:\n{}'.format(user_python_path))
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Information)
                title = definitions.CONST_PROGRAM_TITLE
                msgBox.setWindowTitle(title)
                # msgBox.setTextFormat(Qt.RichText)
                msgBox.setText(str_error)
                msgBox.exec_()
                return
            openeo_lib_path = user_python_folder + definitions.CONST_OPENEO_PIP_INSTALL_PATH
            openeo_lib_path = os.path.normpath(openeo_lib_path)
            if not os.path.exists(openeo_lib_path):
                str_error = self.tr(u'OPENEO is not installed in QGIS python version\n\n')
                str_error += self.tr(u'Open QGIS python console and execute two commands:\n')
                str_error += (u'import pip\n')
                str_error += (u'pip.main(["install","openeo"])\n\n')
                str_error += self.tr(u'You must restart QGIS before use the plugin')
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Information)
                title = definitions.CONST_PROGRAM_TITLE
                msgBox.setWindowTitle(title)
                # msgBox.setTextFormat(Qt.RichText)
                msgBox.setText(str_error)
                msgBox.exec_()
                return
            try:
                import openeo
            except ImportError:
                str_error = self.tr(u'OPENEO is required')
                str_error += self.tr(u'Open QGIS python console and execute two commands:\n')
                str_error += (u'import pip\n')
                str_error += (u'pip.main(["install","openeo"])\n\n')
                str_error += self.tr(u'You must restart QGIS before use the plugin')
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Information)
                title = definitions.CONST_PROGRAM_TITLE
                msgBox.setWindowTitle(title)
                # msgBox.setTextFormat(Qt.RichText)
                msgBox.setText(str_error)
                msgBox.exec_()
                return
            openeo_auth_file_path = user_python_folder + definitions.CONST_OPENEO_AUTH_PATH
            openeo_auth_file_path = os.path.normpath(openeo_auth_file_path)
            if not os.path.exists(openeo_auth_file_path):
                str_error = self.tr(u'OPENEO is not installed in QGIS python version\n\n')
                str_error += self.tr(u'Open QGIS python console and execute two commands:\n')
                str_error += (u'import pip\n')
                str_error += (u'pip.main(["install","openeo"])\n\n')
                str_error += self.tr(u'You must restart QGIS before use the plugin')
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Information)
                title = definitions.CONST_PROGRAM_TITLE
                msgBox.setWindowTitle(title)
                # msgBox.setTextFormat(Qt.RichText)
                msgBox.setText(str_error)
                msgBox.exec_()
                return
            self.user_roaming_path = user_roaming_path
            self.openeo_auth_file_path = openeo_auth_file_path
            path_file_qsettings = self.path_plugin + '/' + definitions.CONST_SETTINGS_FILE_NAME
            self.settings = QSettings(path_file_qsettings, QSettings.IniFormat)
            self.pluginIsActive = True
            #print "** STARTING ForestFireSeverityEstimation"
            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = RemoteSensingARDTimeSeriesDownloaderDockWidget(self.iface,
                                                                                 self.path_plugin,
                                                                                 self.current_plugin_name,
                                                                                 self.settings,
                                                                                 self.user_roaming_path,
                                                                                 self.openeo_auth_file_path)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
        self.dockwidget.show()
